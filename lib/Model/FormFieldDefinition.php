<?php
/**
 * FormFieldDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FormFieldDefinition Class Doc Comment
 *
 * @category Class
 * @description Definition of a form field for OCR data extraction from images
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormFieldDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FormFieldDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field_id' => 'string',
        'left_anchor' => 'string',
        'top_anchor' => 'string',
        'bottom_anchor' => 'string',
        'anchor_mode' => 'string',
        'data_type' => 'string',
        'target_digit_count' => 'int',
        'minimum_character_count' => 'int',
        'allow_numeric_digits' => 'bool',
        'vertical_alignment_type' => 'string',
        'horizontal_alignment_type' => 'string',
        'target_field_width_relative' => 'double',
        'target_field_height_relative' => 'double',
        'target_field_horizontal_adjustment' => 'double',
        'target_field_vertical_adjustment' => 'double',
        'ignore' => 'string[]',
        'options' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field_id' => null,
        'left_anchor' => null,
        'top_anchor' => null,
        'bottom_anchor' => null,
        'anchor_mode' => null,
        'data_type' => null,
        'target_digit_count' => 'int32',
        'minimum_character_count' => 'int32',
        'allow_numeric_digits' => null,
        'vertical_alignment_type' => null,
        'horizontal_alignment_type' => null,
        'target_field_width_relative' => 'double',
        'target_field_height_relative' => 'double',
        'target_field_horizontal_adjustment' => 'double',
        'target_field_vertical_adjustment' => 'double',
        'ignore' => null,
        'options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_id' => 'FieldID',
        'left_anchor' => 'LeftAnchor',
        'top_anchor' => 'TopAnchor',
        'bottom_anchor' => 'BottomAnchor',
        'anchor_mode' => 'AnchorMode',
        'data_type' => 'DataType',
        'target_digit_count' => 'TargetDigitCount',
        'minimum_character_count' => 'MinimumCharacterCount',
        'allow_numeric_digits' => 'AllowNumericDigits',
        'vertical_alignment_type' => 'VerticalAlignmentType',
        'horizontal_alignment_type' => 'HorizontalAlignmentType',
        'target_field_width_relative' => 'TargetFieldWidth_Relative',
        'target_field_height_relative' => 'TargetFieldHeight_Relative',
        'target_field_horizontal_adjustment' => 'TargetFieldHorizontalAdjustment',
        'target_field_vertical_adjustment' => 'TargetFieldVerticalAdjustment',
        'ignore' => 'Ignore',
        'options' => 'Options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_id' => 'setFieldId',
        'left_anchor' => 'setLeftAnchor',
        'top_anchor' => 'setTopAnchor',
        'bottom_anchor' => 'setBottomAnchor',
        'anchor_mode' => 'setAnchorMode',
        'data_type' => 'setDataType',
        'target_digit_count' => 'setTargetDigitCount',
        'minimum_character_count' => 'setMinimumCharacterCount',
        'allow_numeric_digits' => 'setAllowNumericDigits',
        'vertical_alignment_type' => 'setVerticalAlignmentType',
        'horizontal_alignment_type' => 'setHorizontalAlignmentType',
        'target_field_width_relative' => 'setTargetFieldWidthRelative',
        'target_field_height_relative' => 'setTargetFieldHeightRelative',
        'target_field_horizontal_adjustment' => 'setTargetFieldHorizontalAdjustment',
        'target_field_vertical_adjustment' => 'setTargetFieldVerticalAdjustment',
        'ignore' => 'setIgnore',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_id' => 'getFieldId',
        'left_anchor' => 'getLeftAnchor',
        'top_anchor' => 'getTopAnchor',
        'bottom_anchor' => 'getBottomAnchor',
        'anchor_mode' => 'getAnchorMode',
        'data_type' => 'getDataType',
        'target_digit_count' => 'getTargetDigitCount',
        'minimum_character_count' => 'getMinimumCharacterCount',
        'allow_numeric_digits' => 'getAllowNumericDigits',
        'vertical_alignment_type' => 'getVerticalAlignmentType',
        'horizontal_alignment_type' => 'getHorizontalAlignmentType',
        'target_field_width_relative' => 'getTargetFieldWidthRelative',
        'target_field_height_relative' => 'getTargetFieldHeightRelative',
        'target_field_horizontal_adjustment' => 'getTargetFieldHorizontalAdjustment',
        'target_field_vertical_adjustment' => 'getTargetFieldVerticalAdjustment',
        'ignore' => 'getIgnore',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field_id'] = isset($data['field_id']) ? $data['field_id'] : null;
        $this->container['left_anchor'] = isset($data['left_anchor']) ? $data['left_anchor'] : null;
        $this->container['top_anchor'] = isset($data['top_anchor']) ? $data['top_anchor'] : null;
        $this->container['bottom_anchor'] = isset($data['bottom_anchor']) ? $data['bottom_anchor'] : null;
        $this->container['anchor_mode'] = isset($data['anchor_mode']) ? $data['anchor_mode'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['target_digit_count'] = isset($data['target_digit_count']) ? $data['target_digit_count'] : null;
        $this->container['minimum_character_count'] = isset($data['minimum_character_count']) ? $data['minimum_character_count'] : null;
        $this->container['allow_numeric_digits'] = isset($data['allow_numeric_digits']) ? $data['allow_numeric_digits'] : null;
        $this->container['vertical_alignment_type'] = isset($data['vertical_alignment_type']) ? $data['vertical_alignment_type'] : null;
        $this->container['horizontal_alignment_type'] = isset($data['horizontal_alignment_type']) ? $data['horizontal_alignment_type'] : null;
        $this->container['target_field_width_relative'] = isset($data['target_field_width_relative']) ? $data['target_field_width_relative'] : null;
        $this->container['target_field_height_relative'] = isset($data['target_field_height_relative']) ? $data['target_field_height_relative'] : null;
        $this->container['target_field_horizontal_adjustment'] = isset($data['target_field_horizontal_adjustment']) ? $data['target_field_horizontal_adjustment'] : null;
        $this->container['target_field_vertical_adjustment'] = isset($data['target_field_vertical_adjustment']) ? $data['target_field_vertical_adjustment'] : null;
        $this->container['ignore'] = isset($data['ignore']) ? $data['ignore'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets field_id
     *
     * @return string
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string $field_id The identifier of the field; use this to identify which field is being referenced.  Set to SkipField if you do not wish to return the value of this field in the result.
     *
     * @return $this
     */
    public function setFieldId($field_id)
    {
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets left_anchor
     *
     * @return string
     */
    public function getLeftAnchor()
    {
        return $this->container['left_anchor'];
    }

    /**
     * Sets left_anchor
     *
     * @param string $left_anchor Optional - the left-hand anchor of the field
     *
     * @return $this
     */
    public function setLeftAnchor($left_anchor)
    {
        $this->container['left_anchor'] = $left_anchor;

        return $this;
    }

    /**
     * Gets top_anchor
     *
     * @return string
     */
    public function getTopAnchor()
    {
        return $this->container['top_anchor'];
    }

    /**
     * Sets top_anchor
     *
     * @param string $top_anchor Optional - the top anchor of the field
     *
     * @return $this
     */
    public function setTopAnchor($top_anchor)
    {
        $this->container['top_anchor'] = $top_anchor;

        return $this;
    }

    /**
     * Gets bottom_anchor
     *
     * @return string
     */
    public function getBottomAnchor()
    {
        return $this->container['bottom_anchor'];
    }

    /**
     * Sets bottom_anchor
     *
     * @param string $bottom_anchor Optional - the bottom anchor of the field
     *
     * @return $this
     */
    public function setBottomAnchor($bottom_anchor)
    {
        $this->container['bottom_anchor'] = $bottom_anchor;

        return $this;
    }

    /**
     * Gets anchor_mode
     *
     * @return string
     */
    public function getAnchorMode()
    {
        return $this->container['anchor_mode'];
    }

    /**
     * Sets anchor_mode
     *
     * @param string $anchor_mode Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match) and Horizontal (anchor must be laid out horizontally).  Default is Partial.
     *
     * @return $this
     */
    public function setAnchorMode($anchor_mode)
    {
        $this->container['anchor_mode'] = $anchor_mode;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets target_digit_count
     *
     * @return int
     */
    public function getTargetDigitCount()
    {
        return $this->container['target_digit_count'];
    }

    /**
     * Sets target_digit_count
     *
     * @param int $target_digit_count Optional - the target number of digits in the field; useful for fixed-length fields
     *
     * @return $this
     */
    public function setTargetDigitCount($target_digit_count)
    {
        $this->container['target_digit_count'] = $target_digit_count;

        return $this;
    }

    /**
     * Gets minimum_character_count
     *
     * @return int
     */
    public function getMinimumCharacterCount()
    {
        return $this->container['minimum_character_count'];
    }

    /**
     * Sets minimum_character_count
     *
     * @param int $minimum_character_count Optional - the target number of digits in the field; useful for fixed-length fields
     *
     * @return $this
     */
    public function setMinimumCharacterCount($minimum_character_count)
    {
        $this->container['minimum_character_count'] = $minimum_character_count;

        return $this;
    }

    /**
     * Gets allow_numeric_digits
     *
     * @return bool
     */
    public function getAllowNumericDigits()
    {
        return $this->container['allow_numeric_digits'];
    }

    /**
     * Sets allow_numeric_digits
     *
     * @param bool $allow_numeric_digits Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits
     *
     * @return $this
     */
    public function setAllowNumericDigits($allow_numeric_digits)
    {
        $this->container['allow_numeric_digits'] = $allow_numeric_digits;

        return $this;
    }

    /**
     * Gets vertical_alignment_type
     *
     * @return string
     */
    public function getVerticalAlignmentType()
    {
        return $this->container['vertical_alignment_type'];
    }

    /**
     * Sets vertical_alignment_type
     *
     * @param string $vertical_alignment_type Vertical alignment of target value area relative to the field anchor; Possible values are VCenter, Top, Bottom
     *
     * @return $this
     */
    public function setVerticalAlignmentType($vertical_alignment_type)
    {
        $this->container['vertical_alignment_type'] = $vertical_alignment_type;

        return $this;
    }

    /**
     * Gets horizontal_alignment_type
     *
     * @return string
     */
    public function getHorizontalAlignmentType()
    {
        return $this->container['horizontal_alignment_type'];
    }

    /**
     * Sets horizontal_alignment_type
     *
     * @param string $horizontal_alignment_type Horizontal alignment of target value area relative to the field anchor; Possible values are Left, Right
     *
     * @return $this
     */
    public function setHorizontalAlignmentType($horizontal_alignment_type)
    {
        $this->container['horizontal_alignment_type'] = $horizontal_alignment_type;

        return $this;
    }

    /**
     * Gets target_field_width_relative
     *
     * @return double
     */
    public function getTargetFieldWidthRelative()
    {
        return $this->container['target_field_width_relative'];
    }

    /**
     * Sets target_field_width_relative
     *
     * @param double $target_field_width_relative Optional - scale factor for target field width - relative to width of field title; a value of 1.0 indicates the target value area has the same width as the field value as occurring in the image; a value of 2.0 would indicate that the target value area has 2 times the width of the field value as occurring in the image.
     *
     * @return $this
     */
    public function setTargetFieldWidthRelative($target_field_width_relative)
    {
        $this->container['target_field_width_relative'] = $target_field_width_relative;

        return $this;
    }

    /**
     * Gets target_field_height_relative
     *
     * @return double
     */
    public function getTargetFieldHeightRelative()
    {
        return $this->container['target_field_height_relative'];
    }

    /**
     * Sets target_field_height_relative
     *
     * @param double $target_field_height_relative Optional - scale factor for target field height - relative to height of field title
     *
     * @return $this
     */
    public function setTargetFieldHeightRelative($target_field_height_relative)
    {
        $this->container['target_field_height_relative'] = $target_field_height_relative;

        return $this;
    }

    /**
     * Gets target_field_horizontal_adjustment
     *
     * @return double
     */
    public function getTargetFieldHorizontalAdjustment()
    {
        return $this->container['target_field_horizontal_adjustment'];
    }

    /**
     * Sets target_field_horizontal_adjustment
     *
     * @param double $target_field_horizontal_adjustment Optional - horizontal adjestment in relative width of the field
     *
     * @return $this
     */
    public function setTargetFieldHorizontalAdjustment($target_field_horizontal_adjustment)
    {
        $this->container['target_field_horizontal_adjustment'] = $target_field_horizontal_adjustment;

        return $this;
    }

    /**
     * Gets target_field_vertical_adjustment
     *
     * @return double
     */
    public function getTargetFieldVerticalAdjustment()
    {
        return $this->container['target_field_vertical_adjustment'];
    }

    /**
     * Sets target_field_vertical_adjustment
     *
     * @param double $target_field_vertical_adjustment Optional - vertical adjestment in relative height of the field
     *
     * @return $this
     */
    public function setTargetFieldVerticalAdjustment($target_field_vertical_adjustment)
    {
        $this->container['target_field_vertical_adjustment'] = $target_field_vertical_adjustment;

        return $this;
    }

    /**
     * Gets ignore
     *
     * @return string[]
     */
    public function getIgnore()
    {
        return $this->container['ignore'];
    }

    /**
     * Sets ignore
     *
     * @param string[] $ignore Optional - Ignore any result items that contain a partial or complete match with these text strings
     *
     * @return $this
     */
    public function setIgnore($ignore)
    {
        $this->container['ignore'] = $ignore;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string $options Optional - additional options that can be set for this field definition, separated by commas.  Possible values are AllowMultiMatch (allow the same anchor to be matched to multiple fields)
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


