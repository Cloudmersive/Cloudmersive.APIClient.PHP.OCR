<?php
/**
 * FormFieldDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FormFieldDefinition Class Doc Comment
 *
 * @category Class
 * @description Definition of a form field for OCR data extraction from images
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormFieldDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FormFieldDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field_id' => 'string',
        'left_anchor' => 'string',
        'top_anchor' => 'string',
        'anchor_mode' => 'string',
        'data_type' => 'string',
        'target_digit_count' => 'int',
        'minimum_character_count' => 'int',
        'allow_numeric_digits' => 'bool',
        'vertical_alignment_type' => 'string',
        'horizontal_alignment_type' => 'string',
        'target_field_width_relative' => 'double',
        'target_field_height_relative' => 'double',
        'ignore' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field_id' => null,
        'left_anchor' => null,
        'top_anchor' => null,
        'anchor_mode' => null,
        'data_type' => null,
        'target_digit_count' => 'int32',
        'minimum_character_count' => 'int32',
        'allow_numeric_digits' => null,
        'vertical_alignment_type' => null,
        'horizontal_alignment_type' => null,
        'target_field_width_relative' => 'double',
        'target_field_height_relative' => 'double',
        'ignore' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_id' => 'FieldID',
        'left_anchor' => 'LeftAnchor',
        'top_anchor' => 'TopAnchor',
        'anchor_mode' => 'AnchorMode',
        'data_type' => 'DataType',
        'target_digit_count' => 'TargetDigitCount',
        'minimum_character_count' => 'MinimumCharacterCount',
        'allow_numeric_digits' => 'AllowNumericDigits',
        'vertical_alignment_type' => 'VerticalAlignmentType',
        'horizontal_alignment_type' => 'HorizontalAlignmentType',
        'target_field_width_relative' => 'TargetFieldWidth_Relative',
        'target_field_height_relative' => 'TargetFieldHeight_Relative',
        'ignore' => 'Ignore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_id' => 'setFieldId',
        'left_anchor' => 'setLeftAnchor',
        'top_anchor' => 'setTopAnchor',
        'anchor_mode' => 'setAnchorMode',
        'data_type' => 'setDataType',
        'target_digit_count' => 'setTargetDigitCount',
        'minimum_character_count' => 'setMinimumCharacterCount',
        'allow_numeric_digits' => 'setAllowNumericDigits',
        'vertical_alignment_type' => 'setVerticalAlignmentType',
        'horizontal_alignment_type' => 'setHorizontalAlignmentType',
        'target_field_width_relative' => 'setTargetFieldWidthRelative',
        'target_field_height_relative' => 'setTargetFieldHeightRelative',
        'ignore' => 'setIgnore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_id' => 'getFieldId',
        'left_anchor' => 'getLeftAnchor',
        'top_anchor' => 'getTopAnchor',
        'anchor_mode' => 'getAnchorMode',
        'data_type' => 'getDataType',
        'target_digit_count' => 'getTargetDigitCount',
        'minimum_character_count' => 'getMinimumCharacterCount',
        'allow_numeric_digits' => 'getAllowNumericDigits',
        'vertical_alignment_type' => 'getVerticalAlignmentType',
        'horizontal_alignment_type' => 'getHorizontalAlignmentType',
        'target_field_width_relative' => 'getTargetFieldWidthRelative',
        'target_field_height_relative' => 'getTargetFieldHeightRelative',
        'ignore' => 'getIgnore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field_id'] = isset($data['field_id']) ? $data['field_id'] : null;
        $this->container['left_anchor'] = isset($data['left_anchor']) ? $data['left_anchor'] : null;
        $this->container['top_anchor'] = isset($data['top_anchor']) ? $data['top_anchor'] : null;
        $this->container['anchor_mode'] = isset($data['anchor_mode']) ? $data['anchor_mode'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['target_digit_count'] = isset($data['target_digit_count']) ? $data['target_digit_count'] : null;
        $this->container['minimum_character_count'] = isset($data['minimum_character_count']) ? $data['minimum_character_count'] : null;
        $this->container['allow_numeric_digits'] = isset($data['allow_numeric_digits']) ? $data['allow_numeric_digits'] : null;
        $this->container['vertical_alignment_type'] = isset($data['vertical_alignment_type']) ? $data['vertical_alignment_type'] : null;
        $this->container['horizontal_alignment_type'] = isset($data['horizontal_alignment_type']) ? $data['horizontal_alignment_type'] : null;
        $this->container['target_field_width_relative'] = isset($data['target_field_width_relative']) ? $data['target_field_width_relative'] : null;
        $this->container['target_field_height_relative'] = isset($data['target_field_height_relative']) ? $data['target_field_height_relative'] : null;
        $this->container['ignore'] = isset($data['ignore']) ? $data['ignore'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets field_id
     *
     * @return string
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string $field_id field_id
     *
     * @return $this
     */
    public function setFieldId($field_id)
    {
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets left_anchor
     *
     * @return string
     */
    public function getLeftAnchor()
    {
        return $this->container['left_anchor'];
    }

    /**
     * Sets left_anchor
     *
     * @param string $left_anchor left_anchor
     *
     * @return $this
     */
    public function setLeftAnchor($left_anchor)
    {
        $this->container['left_anchor'] = $left_anchor;

        return $this;
    }

    /**
     * Gets top_anchor
     *
     * @return string
     */
    public function getTopAnchor()
    {
        return $this->container['top_anchor'];
    }

    /**
     * Sets top_anchor
     *
     * @param string $top_anchor top_anchor
     *
     * @return $this
     */
    public function setTopAnchor($top_anchor)
    {
        $this->container['top_anchor'] = $top_anchor;

        return $this;
    }

    /**
     * Gets anchor_mode
     *
     * @return string
     */
    public function getAnchorMode()
    {
        return $this->container['anchor_mode'];
    }

    /**
     * Sets anchor_mode
     *
     * @param string $anchor_mode anchor_mode
     *
     * @return $this
     */
    public function setAnchorMode($anchor_mode)
    {
        $this->container['anchor_mode'] = $anchor_mode;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets target_digit_count
     *
     * @return int
     */
    public function getTargetDigitCount()
    {
        return $this->container['target_digit_count'];
    }

    /**
     * Sets target_digit_count
     *
     * @param int $target_digit_count target_digit_count
     *
     * @return $this
     */
    public function setTargetDigitCount($target_digit_count)
    {
        $this->container['target_digit_count'] = $target_digit_count;

        return $this;
    }

    /**
     * Gets minimum_character_count
     *
     * @return int
     */
    public function getMinimumCharacterCount()
    {
        return $this->container['minimum_character_count'];
    }

    /**
     * Sets minimum_character_count
     *
     * @param int $minimum_character_count minimum_character_count
     *
     * @return $this
     */
    public function setMinimumCharacterCount($minimum_character_count)
    {
        $this->container['minimum_character_count'] = $minimum_character_count;

        return $this;
    }

    /**
     * Gets allow_numeric_digits
     *
     * @return bool
     */
    public function getAllowNumericDigits()
    {
        return $this->container['allow_numeric_digits'];
    }

    /**
     * Sets allow_numeric_digits
     *
     * @param bool $allow_numeric_digits allow_numeric_digits
     *
     * @return $this
     */
    public function setAllowNumericDigits($allow_numeric_digits)
    {
        $this->container['allow_numeric_digits'] = $allow_numeric_digits;

        return $this;
    }

    /**
     * Gets vertical_alignment_type
     *
     * @return string
     */
    public function getVerticalAlignmentType()
    {
        return $this->container['vertical_alignment_type'];
    }

    /**
     * Sets vertical_alignment_type
     *
     * @param string $vertical_alignment_type vertical_alignment_type
     *
     * @return $this
     */
    public function setVerticalAlignmentType($vertical_alignment_type)
    {
        $this->container['vertical_alignment_type'] = $vertical_alignment_type;

        return $this;
    }

    /**
     * Gets horizontal_alignment_type
     *
     * @return string
     */
    public function getHorizontalAlignmentType()
    {
        return $this->container['horizontal_alignment_type'];
    }

    /**
     * Sets horizontal_alignment_type
     *
     * @param string $horizontal_alignment_type horizontal_alignment_type
     *
     * @return $this
     */
    public function setHorizontalAlignmentType($horizontal_alignment_type)
    {
        $this->container['horizontal_alignment_type'] = $horizontal_alignment_type;

        return $this;
    }

    /**
     * Gets target_field_width_relative
     *
     * @return double
     */
    public function getTargetFieldWidthRelative()
    {
        return $this->container['target_field_width_relative'];
    }

    /**
     * Sets target_field_width_relative
     *
     * @param double $target_field_width_relative target_field_width_relative
     *
     * @return $this
     */
    public function setTargetFieldWidthRelative($target_field_width_relative)
    {
        $this->container['target_field_width_relative'] = $target_field_width_relative;

        return $this;
    }

    /**
     * Gets target_field_height_relative
     *
     * @return double
     */
    public function getTargetFieldHeightRelative()
    {
        return $this->container['target_field_height_relative'];
    }

    /**
     * Sets target_field_height_relative
     *
     * @param double $target_field_height_relative target_field_height_relative
     *
     * @return $this
     */
    public function setTargetFieldHeightRelative($target_field_height_relative)
    {
        $this->container['target_field_height_relative'] = $target_field_height_relative;

        return $this;
    }

    /**
     * Gets ignore
     *
     * @return string[]
     */
    public function getIgnore()
    {
        return $this->container['ignore'];
    }

    /**
     * Sets ignore
     *
     * @param string[] $ignore ignore
     *
     * @return $this
     */
    public function setIgnore($ignore)
    {
        $this->container['ignore'] = $ignore;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


