<?php
/**
 * OcrWordElement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OcrWordElement Class Doc Comment
 *
 * @category Class
 * @description A single word in an OCR document
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OcrWordElement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OcrWordElement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'word_text' => 'string',
        'line_number' => 'int',
        'word_number' => 'int',
        'x_left' => 'int',
        'y_top' => 'int',
        'width' => 'int',
        'height' => 'int',
        'confidence_level' => 'double',
        'block_number' => 'int',
        'paragraph_number' => 'int',
        'page_number' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'word_text' => null,
        'line_number' => 'int32',
        'word_number' => 'int32',
        'x_left' => 'int32',
        'y_top' => 'int32',
        'width' => 'int32',
        'height' => 'int32',
        'confidence_level' => 'double',
        'block_number' => 'int32',
        'paragraph_number' => 'int32',
        'page_number' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'word_text' => 'WordText',
        'line_number' => 'LineNumber',
        'word_number' => 'WordNumber',
        'x_left' => 'XLeft',
        'y_top' => 'YTop',
        'width' => 'Width',
        'height' => 'Height',
        'confidence_level' => 'ConfidenceLevel',
        'block_number' => 'BlockNumber',
        'paragraph_number' => 'ParagraphNumber',
        'page_number' => 'PageNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'word_text' => 'setWordText',
        'line_number' => 'setLineNumber',
        'word_number' => 'setWordNumber',
        'x_left' => 'setXLeft',
        'y_top' => 'setYTop',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'confidence_level' => 'setConfidenceLevel',
        'block_number' => 'setBlockNumber',
        'paragraph_number' => 'setParagraphNumber',
        'page_number' => 'setPageNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'word_text' => 'getWordText',
        'line_number' => 'getLineNumber',
        'word_number' => 'getWordNumber',
        'x_left' => 'getXLeft',
        'y_top' => 'getYTop',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'confidence_level' => 'getConfidenceLevel',
        'block_number' => 'getBlockNumber',
        'paragraph_number' => 'getParagraphNumber',
        'page_number' => 'getPageNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['word_text'] = isset($data['word_text']) ? $data['word_text'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['word_number'] = isset($data['word_number']) ? $data['word_number'] : null;
        $this->container['x_left'] = isset($data['x_left']) ? $data['x_left'] : null;
        $this->container['y_top'] = isset($data['y_top']) ? $data['y_top'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['confidence_level'] = isset($data['confidence_level']) ? $data['confidence_level'] : null;
        $this->container['block_number'] = isset($data['block_number']) ? $data['block_number'] : null;
        $this->container['paragraph_number'] = isset($data['paragraph_number']) ? $data['paragraph_number'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets word_text
     *
     * @return string
     */
    public function getWordText()
    {
        return $this->container['word_text'];
    }

    /**
     * Sets word_text
     *
     * @param string $word_text Text of the word
     *
     * @return $this
     */
    public function setWordText($word_text)
    {
        $this->container['word_text'] = $word_text;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number Line number of the word
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets word_number
     *
     * @return int
     */
    public function getWordNumber()
    {
        return $this->container['word_number'];
    }

    /**
     * Sets word_number
     *
     * @param int $word_number Index of the word in the line
     *
     * @return $this
     */
    public function setWordNumber($word_number)
    {
        $this->container['word_number'] = $word_number;

        return $this;
    }

    /**
     * Gets x_left
     *
     * @return int
     */
    public function getXLeft()
    {
        return $this->container['x_left'];
    }

    /**
     * Sets x_left
     *
     * @param int $x_left X location of the left edge of the word in pixels
     *
     * @return $this
     */
    public function setXLeft($x_left)
    {
        $this->container['x_left'] = $x_left;

        return $this;
    }

    /**
     * Gets y_top
     *
     * @return int
     */
    public function getYTop()
    {
        return $this->container['y_top'];
    }

    /**
     * Sets y_top
     *
     * @param int $y_top Y location of the top edge of the word in pixels
     *
     * @return $this
     */
    public function setYTop($y_top)
    {
        $this->container['y_top'] = $y_top;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width Width of the word in pixels
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Height of the word in pixels
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets confidence_level
     *
     * @return double
     */
    public function getConfidenceLevel()
    {
        return $this->container['confidence_level'];
    }

    /**
     * Sets confidence_level
     *
     * @param double $confidence_level Confidence level of the machine learning result; possible values are 0.0 (lowest accuracy) - 1.0 (highest accuracy)
     *
     * @return $this
     */
    public function setConfidenceLevel($confidence_level)
    {
        $this->container['confidence_level'] = $confidence_level;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return int
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param int $block_number Index of the containing block
     *
     * @return $this
     */
    public function setBlockNumber($block_number)
    {
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets paragraph_number
     *
     * @return int
     */
    public function getParagraphNumber()
    {
        return $this->container['paragraph_number'];
    }

    /**
     * Sets paragraph_number
     *
     * @param int $paragraph_number Index of the containing paragraph
     *
     * @return $this
     */
    public function setParagraphNumber($paragraph_number)
    {
        $this->container['paragraph_number'] = $paragraph_number;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number Index of the containing page
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


