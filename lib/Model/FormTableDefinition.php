<?php
/**
 * FormTableDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FormTableDefinition Class Doc Comment
 *
 * @category Class
 * @description Definition of a form table for OCR data extraction from images
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormTableDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FormTableDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'table_id' => 'string',
        'column_definitions' => '\Swagger\Client\Model\FormTableColumnDefinition[]',
        'target_table_height_relative' => 'double',
        'target_row_height_relative' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'table_id' => null,
        'column_definitions' => null,
        'target_table_height_relative' => 'double',
        'target_row_height_relative' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'table_id' => 'TableID',
        'column_definitions' => 'ColumnDefinitions',
        'target_table_height_relative' => 'TargetTableHeight_Relative',
        'target_row_height_relative' => 'TargetRowHeight_Relative'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'table_id' => 'setTableId',
        'column_definitions' => 'setColumnDefinitions',
        'target_table_height_relative' => 'setTargetTableHeightRelative',
        'target_row_height_relative' => 'setTargetRowHeightRelative'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'table_id' => 'getTableId',
        'column_definitions' => 'getColumnDefinitions',
        'target_table_height_relative' => 'getTargetTableHeightRelative',
        'target_row_height_relative' => 'getTargetRowHeightRelative'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['table_id'] = isset($data['table_id']) ? $data['table_id'] : null;
        $this->container['column_definitions'] = isset($data['column_definitions']) ? $data['column_definitions'] : null;
        $this->container['target_table_height_relative'] = isset($data['target_table_height_relative']) ? $data['target_table_height_relative'] : null;
        $this->container['target_row_height_relative'] = isset($data['target_row_height_relative']) ? $data['target_row_height_relative'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets table_id
     *
     * @return string
     */
    public function getTableId()
    {
        return $this->container['table_id'];
    }

    /**
     * Sets table_id
     *
     * @param string $table_id Optional; the ID of the table
     *
     * @return $this
     */
    public function setTableId($table_id)
    {
        $this->container['table_id'] = $table_id;

        return $this;
    }

    /**
     * Gets column_definitions
     *
     * @return \Swagger\Client\Model\FormTableColumnDefinition[]
     */
    public function getColumnDefinitions()
    {
        return $this->container['column_definitions'];
    }

    /**
     * Sets column_definitions
     *
     * @param \Swagger\Client\Model\FormTableColumnDefinition[] $column_definitions Definition of the columns in the table
     *
     * @return $this
     */
    public function setColumnDefinitions($column_definitions)
    {
        $this->container['column_definitions'] = $column_definitions;

        return $this;
    }

    /**
     * Gets target_table_height_relative
     *
     * @return double
     */
    public function getTargetTableHeightRelative()
    {
        return $this->container['target_table_height_relative'];
    }

    /**
     * Sets target_table_height_relative
     *
     * @param double $target_table_height_relative Optional - scale factor for target table height - relative to maximum height of headers of columns
     *
     * @return $this
     */
    public function setTargetTableHeightRelative($target_table_height_relative)
    {
        $this->container['target_table_height_relative'] = $target_table_height_relative;

        return $this;
    }

    /**
     * Gets target_row_height_relative
     *
     * @return double
     */
    public function getTargetRowHeightRelative()
    {
        return $this->container['target_row_height_relative'];
    }

    /**
     * Sets target_row_height_relative
     *
     * @param double $target_row_height_relative Optional - scale factor for target row height - relative to height of column header
     *
     * @return $this
     */
    public function setTargetRowHeightRelative($target_row_height_relative)
    {
        $this->container['target_row_height_relative'] = $target_row_height_relative;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


