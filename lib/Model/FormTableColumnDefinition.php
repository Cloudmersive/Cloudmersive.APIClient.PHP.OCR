<?php
/**
 * FormTableColumnDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ocrapi
 *
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FormTableColumnDefinition Class Doc Comment
 *
 * @category Class
 * @description Definition of a column within a table for OCR data extraction from images
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormTableColumnDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FormTableColumnDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'column_id' => 'string',
        'top_anchor' => 'string',
        'anchor_mode' => 'string',
        'data_type' => 'string',
        'minimum_character_count' => 'int',
        'allow_numeric_digits' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'column_id' => null,
        'top_anchor' => null,
        'anchor_mode' => null,
        'data_type' => null,
        'minimum_character_count' => 'int32',
        'allow_numeric_digits' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'column_id' => 'ColumnID',
        'top_anchor' => 'TopAnchor',
        'anchor_mode' => 'AnchorMode',
        'data_type' => 'DataType',
        'minimum_character_count' => 'MinimumCharacterCount',
        'allow_numeric_digits' => 'AllowNumericDigits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'column_id' => 'setColumnId',
        'top_anchor' => 'setTopAnchor',
        'anchor_mode' => 'setAnchorMode',
        'data_type' => 'setDataType',
        'minimum_character_count' => 'setMinimumCharacterCount',
        'allow_numeric_digits' => 'setAllowNumericDigits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'column_id' => 'getColumnId',
        'top_anchor' => 'getTopAnchor',
        'anchor_mode' => 'getAnchorMode',
        'data_type' => 'getDataType',
        'minimum_character_count' => 'getMinimumCharacterCount',
        'allow_numeric_digits' => 'getAllowNumericDigits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['column_id'] = isset($data['column_id']) ? $data['column_id'] : null;
        $this->container['top_anchor'] = isset($data['top_anchor']) ? $data['top_anchor'] : null;
        $this->container['anchor_mode'] = isset($data['anchor_mode']) ? $data['anchor_mode'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['minimum_character_count'] = isset($data['minimum_character_count']) ? $data['minimum_character_count'] : null;
        $this->container['allow_numeric_digits'] = isset($data['allow_numeric_digits']) ? $data['allow_numeric_digits'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets column_id
     *
     * @return string
     */
    public function getColumnId()
    {
        return $this->container['column_id'];
    }

    /**
     * Sets column_id
     *
     * @param string $column_id The identifier of the field; use this to identify which field is being referenced
     *
     * @return $this
     */
    public function setColumnId($column_id)
    {
        $this->container['column_id'] = $column_id;

        return $this;
    }

    /**
     * Gets top_anchor
     *
     * @return string
     */
    public function getTopAnchor()
    {
        return $this->container['top_anchor'];
    }

    /**
     * Sets top_anchor
     *
     * @param string $top_anchor Optional - the top anchor of the column heading
     *
     * @return $this
     */
    public function setTopAnchor($top_anchor)
    {
        $this->container['top_anchor'] = $top_anchor;

        return $this;
    }

    /**
     * Gets anchor_mode
     *
     * @return string
     */
    public function getAnchorMode()
    {
        return $this->container['anchor_mode'];
    }

    /**
     * Sets anchor_mode
     *
     * @param string $anchor_mode Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match).  Default is Partial.
     *
     * @return $this
     */
    public function setAnchorMode($anchor_mode)
    {
        $this->container['anchor_mode'] = $anchor_mode;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets minimum_character_count
     *
     * @return int
     */
    public function getMinimumCharacterCount()
    {
        return $this->container['minimum_character_count'];
    }

    /**
     * Sets minimum_character_count
     *
     * @param int $minimum_character_count Optional - the target number of digits in the field; useful for fixed-length fields
     *
     * @return $this
     */
    public function setMinimumCharacterCount($minimum_character_count)
    {
        $this->container['minimum_character_count'] = $minimum_character_count;

        return $this;
    }

    /**
     * Gets allow_numeric_digits
     *
     * @return bool
     */
    public function getAllowNumericDigits()
    {
        return $this->container['allow_numeric_digits'];
    }

    /**
     * Sets allow_numeric_digits
     *
     * @param bool $allow_numeric_digits Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits
     *
     * @return $this
     */
    public function setAllowNumericDigits($allow_numeric_digits)
    {
        $this->container['allow_numeric_digits'] = $allow_numeric_digits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


